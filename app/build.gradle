import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'com.google.gms.google-services'
}

android {
    namespace = "com.dubu.main"
    compileSdk versions.compileSdk
    buildToolsVersion versions.buildToolsVersion
    defaultConfig {
        applicationId "ai.kissr.app"
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName

        ndk {
            //选择要添加的对应cpu类型的.so库
            // abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
            abiFilters 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            storeFile file("./dubu.jks")
            keyAlias "dubu"
            storePassword "a123123"
            keyPassword "a123123"
        }
        debug {
            storeFile file("./dubu.jks")
            keyAlias "dubu"
            storePassword "a123123"
            keyPassword "a123123"
        }
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "Fichat_dev_${variant.versionName}_${timeStamp()}.apk"
            }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        disable "Instantiatable"
        abortOnError false
    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/*/libnapi.so'
//        pickFirst 'lib/armeabi-v7a/libnapi.so'
    }
}


dependencies {
    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':lib_common')
    implementation project(path: ':engine_home')
    implementation project(path: ':engine_me')
    implementation project(path: ':engine_chat')
    implementation project(path: ':engine_message')
    implementation 'androidx.core:core-splashscreen:1.0.1'
    kapt "com.alibaba:arouter-compiler:$versions.arouter_compiler"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshiVersion"
}


kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
    useBuildCache = true
}

static def timeStamp() {
    def sdf = new SimpleDateFormat("yyyyMMddHHmm")
    return sdf.format(new Date())
}

// 在 app/build.gradle 末尾添加
afterEvaluate {
    tasks.register("findWireRuntimeDeps") {
        doLast {
            println("====== 查找所有依赖中包含 wire-runtime 的库 ======")
            configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                dep.allModuleArtifacts.each { art ->
                    if (art.moduleVersion.id.group.contains("com.squareup.wire") ||
                            art.moduleVersion.id.name.contains("wire-runtime")) {
                        println(">>> ${art.moduleVersion.id}")
                        println("    来自: ${dep.moduleGroup}:${dep.moduleName}:${dep.moduleVersion}")
                    }
                }
            }
        }
    }
}
